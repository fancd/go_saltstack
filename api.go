package main

import (
	"net/http"
	"fmt"
	"bytes"
	"io/ioutil"
	"encoding/json"
)

type AutoGenerated struct {
	Return []struct {
		Perms  []string `json:"perms"`
		Start  float64 `json:"start"`
		Token  string `json:"token"`
		Expire float64 `json:"expire"`
		User   string `json:"user"`
		Eauth  string `json:"eauth"`
	} `json:"return"`
}

type CONFIG struct {
	Salt_host   string //saltapi地址
	Salt_user   string //用户名
	Salt_passwd string //密码
	Token       string
}

func (C *CONFIG) GET_TOKEN() (error) { // 获取token
	SALT_LOGIN_URL := C.Salt_host + "/login"
	client := &http.Client{}
	post := fmt.Sprintf(`{"eauth": "%s", "username": "%s", "password": "%s"}`, "pam", C.Salt_user, C.Salt_passwd)

	req, err := http.NewRequest("POST", SALT_LOGIN_URL, bytes.NewBuffer([]byte(post)))
	if err != nil {
		return err
	}
	req.Header.Set("X-Auth-Token", "")
	req.Header.Set("Content-Type", "application/json")
	resp, client_err := client.Do(req)
	if client_err != nil {
		return client_err
	}
	defer resp.Body.Close()
	body, ioutil_err := ioutil.ReadAll(resp.Body)
	if ioutil_err != nil {
		return ioutil_err
	}
	var JsonRes AutoGenerated
	json.Unmarshal([]byte(string(body)), &JsonRes)
	C.Token = JsonRes.Return[0].Token
	return nil
}

func (C *CONFIG) CMD_SALT(post_data string) (string, error) {

	client := &http.Client{}
	req1, http_err := http.NewRequest("POST", C.Salt_host, bytes.NewBuffer([]byte(post_data)))
	if http_err != nil {
		return "", http_err
	}
	req1.Header.Set("X-Auth-Token", C.Token)
	req1.Header.Set("Content-Type", "application/json")
	resp1, client_err := client.Do(req1)
	if client_err != nil {
		return "", client_err
	}
	defer resp1.Body.Close()
	body1, ioutil_err := ioutil.ReadAll(resp1.Body)
	if ioutil_err != nil {
		return "", ioutil_err
	}
	return string(body1), nil
}